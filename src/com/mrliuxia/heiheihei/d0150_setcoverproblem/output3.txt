   JAVA SET COVER PROBLEM SOLVER
M - Enter SCP com.mrliuxia.jarvis.model data
P - Print SCP instance
A - Set minimum coverage percentage
C - Solve SCP with the greedy coverage heuristic
S - Solve SCP with the greedy cost heuristic
V - Solve SCP with Chvatal's com.mrliuxia.jarvis.algorithm
X - Compare com.mrliuxia.jarvis.algorithm performance
Q - Quit

Enter choice: 
Enter minimum coverage (alpha): 
   JAVA SET COVER PROBLEM SOLVER
M - Enter SCP com.mrliuxia.jarvis.model data
P - Print SCP instance
A - Set minimum coverage percentage
C - Solve SCP with the greedy coverage heuristic
S - Solve SCP with the greedy cost heuristic
V - Solve SCP with Chvatal's com.mrliuxia.jarvis.algorithm
X - Compare com.mrliuxia.jarvis.algorithm performance
Q - Quit

Enter choice: 
Enter number of elements (n): Enter number of sets (m): 
Set 1 details
   Enter cost of set 1:    Enter an element covered by set 1 (0 to stop):    Enter an element covered by set 1 (0 to stop):    Enter an element covered by set 1 (0 to stop):    Enter an element covered by set 1 (0 to stop): 
Set 2 details
   Enter cost of set 2:    Enter an element covered by set 2 (0 to stop):    Enter an element covered by set 2 (0 to stop):    Enter an element covered by set 2 (0 to stop):    Enter an element covered by set 2 (0 to stop):    Enter an element covered by set 2 (0 to stop):    Enter an element covered by set 2 (0 to stop): 
Set 3 details
   Enter cost of set 3:    Enter an element covered by set 3 (0 to stop):    Enter an element covered by set 3 (0 to stop):    Enter an element covered by set 3 (0 to stop):    Enter an element covered by set 3 (0 to stop): 
Set 4 details
   Enter cost of set 4:    Enter an element covered by set 4 (0 to stop):    Enter an element covered by set 4 (0 to stop):    Enter an element covered by set 4 (0 to stop):    Enter an element covered by set 4 (0 to stop): 
Set 5 details
   Enter cost of set 5:    Enter an element covered by set 5 (0 to stop):    Enter an element covered by set 5 (0 to stop):    Enter an element covered by set 5 (0 to stop):    Enter an element covered by set 5 (0 to stop):    Enter an element covered by set 5 (0 to stop):    JAVA SET COVER PROBLEM SOLVER
M - Enter SCP com.mrliuxia.jarvis.model data
P - Print SCP instance
A - Set minimum coverage percentage
C - Solve SCP with the greedy coverage heuristic
S - Solve SCP with the greedy cost heuristic
V - Solve SCP with Chvatal's com.mrliuxia.jarvis.algorithm
X - Compare com.mrliuxia.jarvis.algorithm performance
Q - Quit

Enter choice: 
Weighted SCP com.mrliuxia.jarvis.model:
---------------------
Number of elements (n): 9
Number of sets (m): 5

Set details:
----------------------------------------------------------
Set ID:   1   Cost:   2.90   Element IDs: [1, 2, 3]
Set ID:   2   Cost:   4.00   Element IDs: [1, 2, 3, 4, 5]
Set ID:   3   Cost:   3.00   Element IDs: [5, 6, 7]
Set ID:   4   Cost:   1.00   Element IDs: [5, 6, 7]
Set ID:   5   Cost:   3.90   Element IDs: [6, 7, 8, 9]

Minimum coverage (alpha): 70.00%

   JAVA SET COVER PROBLEM SOLVER
M - Enter SCP com.mrliuxia.jarvis.model data
P - Print SCP instance
A - Set minimum coverage percentage
C - Solve SCP with the greedy coverage heuristic
S - Solve SCP with the greedy cost heuristic
V - Solve SCP with Chvatal's com.mrliuxia.jarvis.algorithm
X - Compare com.mrliuxia.jarvis.algorithm performance
Q - Quit

Enter choice: Running 'Greedy coverage heuristic'...
- Selected: Set ID:   2   Cost:   4.00   Element IDs: [1, 2, 3, 4, 5]
- Selected: Set ID:   5   Cost:   3.90   Element IDs: [6, 7, 8, 9]
Done.

'Greedy coverage heuristic' results:
'Greedy coverage heuristic'   Time to solve: 0ms
'Greedy coverage heuristic'   Objective function value: 7.90
'Greedy coverage heuristic'   Coverage level: 100.00% (70.00% minimum)
'Greedy coverage heuristic'   Number of sets selected: 2
'Greedy coverage heuristic'   Sets selected: 2 5 

   JAVA SET COVER PROBLEM SOLVER
M - Enter SCP com.mrliuxia.jarvis.model data
P - Print SCP instance
A - Set minimum coverage percentage
C - Solve SCP with the greedy coverage heuristic
S - Solve SCP with the greedy cost heuristic
V - Solve SCP with Chvatal's com.mrliuxia.jarvis.algorithm
X - Compare com.mrliuxia.jarvis.algorithm performance
Q - Quit

Enter choice: Running 'Greedy cost heuristic'...
- Selected: Set ID:   4   Cost:   1.00   Element IDs: [5, 6, 7]
- Selected: Set ID:   1   Cost:   2.90   Element IDs: [1, 2, 3]
- Selected: Set ID:   5   Cost:   3.90   Element IDs: [6, 7, 8, 9]
Done.

'Greedy cost heuristic' results:
'Greedy cost heuristic'   Time to solve: 0ms
'Greedy cost heuristic'   Objective function value: 7.80
'Greedy cost heuristic'   Coverage level: 88.89% (70.00% minimum)
'Greedy cost heuristic'   Number of sets selected: 3
'Greedy cost heuristic'   Sets selected: 1 4 5 

   JAVA SET COVER PROBLEM SOLVER
M - Enter SCP com.mrliuxia.jarvis.model data
P - Print SCP instance
A - Set minimum coverage percentage
C - Solve SCP with the greedy coverage heuristic
S - Solve SCP with the greedy cost heuristic
V - Solve SCP with Chvatal's com.mrliuxia.jarvis.algorithm
X - Compare com.mrliuxia.jarvis.algorithm performance
Q - Quit

Enter choice: Running 'Chvatal's com.mrliuxia.jarvis.algorithm'...
- Selected: Set ID:   4   Cost:   1.00   Element IDs: [5, 6, 7]
- Selected: Set ID:   1   Cost:   2.90   Element IDs: [1, 2, 3]
- Selected: Set ID:   5   Cost:   3.90   Element IDs: [6, 7, 8, 9]
Done.

'Chvatal's com.mrliuxia.jarvis.algorithm' results:
'Chvatal's com.mrliuxia.jarvis.algorithm'   Time to solve: 0ms
'Chvatal's com.mrliuxia.jarvis.algorithm'   Objective function value: 7.80
'Chvatal's com.mrliuxia.jarvis.algorithm'   Coverage level: 88.89% (70.00% minimum)
'Chvatal's com.mrliuxia.jarvis.algorithm'   Number of sets selected: 3
'Chvatal's com.mrliuxia.jarvis.algorithm'   Sets selected: 1 4 5

   JAVA SET COVER PROBLEM SOLVER
M - Enter SCP com.mrliuxia.jarvis.model data
P - Print SCP instance
A - Set minimum coverage percentage
C - Solve SCP with the greedy coverage heuristic
S - Solve SCP with the greedy cost heuristic
V - Solve SCP with Chvatal's com.mrliuxia.jarvis.algorithm
X - Compare com.mrliuxia.jarvis.algorithm performance
Q - Quit

Enter choice: 
Alpha: 70.00%

Algorithm                   Time (ms)     Obj Fn Val     Coverage (%)
---------------------------------------------------------------------
Greedy coverage heuristic           0         7.9000           100.00
Greedy cost heuristic               0         7.8000            88.89
Chvatal's com.mrliuxia.jarvis.algorithm                 0         7.8000            88.89
---------------------------------------------------------------------
Category winner              Coverage           Cost         Coverage
---------------------------------------------------------------------

Overall winner: Unclear

   JAVA SET COVER PROBLEM SOLVER
M - Enter SCP com.mrliuxia.jarvis.model data
P - Print SCP instance
A - Set minimum coverage percentage
C - Solve SCP with the greedy coverage heuristic
S - Solve SCP with the greedy cost heuristic
V - Solve SCP with Chvatal's com.mrliuxia.jarvis.algorithm
X - Compare com.mrliuxia.jarvis.algorithm performance
Q - Quit

Enter choice: 
Ciao!
